# for evaluating genome for GE

# style = 'solid' if cg.enabled else 'dotted'
# color = 'green' if cg.weight > 0 else 'red'
# width = str(0.1 + abs(cg.weight / 5.0))



import numpy as np
import pandas as pd
import os
import neat
import visualize
import pickle
import timeit
from math import sqrt
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error



# 2-input XOR inputs and expected outputs.

dge_2009=pd.read_csv('../../ppge12_2009.csv')

dge_2010=pd.read_csv('../../ppge12_2010.csv')

dmit_2009=pd.read_csv('../../ppmit12_2009.csv')

dmit_2010=pd.read_csv('../../ppmit12_2010.csv')

df_2009 = pd.merge(dge_2009, dmit_2009, how='left', on=['ws_2009','delta_dir_2009'])
df_2009['all'] = df_2009['m0']+df_2009['g0']
# print( df_2009.head())

df_2010 = pd.merge(dge_2010, dmit_2010, how='left', on=['ws_2010','delta_dir_2010'])
df_2010['all'] = df_2010['m0']+df_2010['g0']
# print( df_2010.head())

# X_train = dge_2009.ix[range(1,2),list(range(1,8))]
N1 = 365*24*6
# N1 = 2
# y_train = dge_2009.ix[range(1,2),['l0']]

X_train = df_2009.ix[range(1,N1),['ws_2009','delta_dir_2009','g6','g5','g4',
'g3','g2','g1','m6','m5','m4','m3','m2','m1']]

# print( X_train.head())
y_train = df_2009.ix[range(1,N1),['all']]


#X_train.dtypes
X_test = df_2010.ix[range(0,N1),['ws_2010','delta_dir_2010','g6','g5','g4',
'g3','g2','g1','m6','m5','m4','m3','m2','m1']]

# print( X_test.head())

y_test = df_2010.ix[range(0,N1),['all']]
    
X_train = X_train.values.tolist()
y_train = y_train.values.tolist()
X_test = X_test.values.tolist()
y_test = y_test.values





s1 = timeit.default_timer()  

# Load configuration.
config = neat.Config(neat.DefaultGenome, neat.DefaultReproduction,
                 neat.DefaultSpeciesSet, neat.DefaultStagnation,
                 'config')

# Create the population, which is the top-level object for a NEAT run.
p = neat.Population(config)

# Add a stdout reporter to show progress in the terminal.
p.add_reporter(neat.StdOutReporter(True))
stats = neat.StatisticsReporter()
p.add_reporter(stats)
#p.add_reporter(neat.Checkpointer(100))



# i=1
# Run until a solution is found.
# winner = p.run(eval_genomes, 1)  # run for 12000 to test 
# with open('winner_genome'+str(i), 'wb') as f:
    # pickle.dump(winner, f)






k=8

f=open('winner_genome'+str(k),'rb')  
winner2=pickle.load(f)  

# Display the winning genome.
print('\nBest genome:\n{!s}'.format(winner2))

# Make and show prediction on unseen data (test set) using winner NN's 
# genome.
print('\nOutput:')
# p = neat.Checkpointer.restore_checkpoint('neat-checkpoint-49')
list2 = []
# print ('type(list2)',type(list2))

winner_net = neat.nn.RecurrentNetwork.create(winner2, config)
for xi, xo in zip(X_test, y_test):
    output = winner_net.activate(xi)
    # print ('type(output)',type(output))
    list2.append(output)
    # print("  input {!r}, expected output {!r}, got {!r}".format(
    # xi, xo, output))
pred = np.array(list2)
print('pred',pred)

# np.savetxt("pred-ge"+str(i)+".txt",pred)
s2 = timeit.default_timer()  

print ('Runing time is Hour:',round((s2 -s1)/3600,2))

yhat =pred
y= y_test
print(type(yhat))
print(type(y))

rmse = sqrt(mean_squared_error(y, yhat))

max_y =300.5
print("GE+Mits RMSE=",rmse)
print("GE+Mits NRMSE=",100*rmse/max_y)
mae= mean_absolute_error(y, yhat)
print("GE+Mits MAE=",mae)
print("GE+Mits NMAE=",100*mae/max_y)



node_names = {-1: 'wind_speed', -2: 'delta_wind_direction', -3: 'GeLag6',
-4: 'GeLag5',-5: 'GeLag4',-6: 'GeLag3',-7: 'GeLag2',-8: 'GeLag1',
-9:'MitLag6', -10:'MitLag5', -11:'MitLag4', -12:'MitLag3', -13:'MitLag2', -14:'MitLag1', 
0: 'Prediction'}

f_name = 'winner'+str(k)+'.gv'
visualize.draw_net(config, winner2, True, node_names=node_names,
               filename=f_name)


