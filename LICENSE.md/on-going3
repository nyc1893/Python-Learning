"""
This is the code for AR and AR+SVR , AR+ RFR
For AR  GE 1530 data for training, the rest of 16000 for predicting
For ML  2009MET data(the first 1530 data are not conclude)+  2010 MET
1530 data for training  the error prediction=17520 datasets , the rest
of 16000 MET data for predicting.
"""
import numpy as np
import pandas as pd
from pandas import DataFrame
import matplotlib.pyplot as plt

from pandas import Series
from matplotlib import pyplot
from statsmodels.tsa.ar_model import AR
from sklearn.metrics import mean_squared_error

df=pd.read_csv('GE_kW_2009.csv')

df=df.fillna(0)
df[df<0]=0
ddf=df.loc[df.index*3]
ddf=ddf.dropna()

dw=ddf.ix[ddf.index,list(range(5,58))]
dw['ColSum']=dw.apply(lambda x:x.sum(),axis=1)



dd=pd.read_csv('MET_2009.csv')
dd=dd.fillna(0)
dd=dd.ix[ddf.index,list(range(5,5+12))]


dt=pd.read_csv('GE_kW_2010.csv')
dt=dt.fillna(0)
dt[dt<0]=0

dt=dt.iloc[ddf.index]
dt['ColSum']=dt.apply(lambda x:x.sum(),axis=1)

dk=pd.read_csv('MET_2010.csv')
dk=dk.fillna(0)
dk=dk.ix[ddf.index,list(range(5,5+12))]



X = np.array(dw['ColSum']/1000)
K = np.array(dt['ColSum']/1000)



predict_num=16000# have to less than 17520,K ---> 2010,X --->2009

ddd=dd.reset_index(drop = True)
ddd=ddd.ix[ddd.index,list(range(0,12))]
ddd=ddd.reset_index(drop = True)


ddk=dk.reset_index(drop = True)
ddk=ddk.ix[list(range(len(X)-predict_num,len(X))),list(range(0,12))]
ddk=ddk.reset_index(drop = True)

#AR train for 2009

train, test = X[1:len(X)-predict_num], X[len(X)-predict_num:]
model = AR(train)
model_fit = model.fit()
window = model_fit.k_ar
coef = model_fit.params
# walk forward over time steps in test
history = train[len(train)-window:]
history = [history[i] for i in range(len(history))]
predictions_09 = list()
for t in range(len(test)):
	length = len(history)
	lag = [history[i] for i in range(length-window,length)]
	yhat = coef[0]
	for d in range(window):
		yhat += coef[d+1] * lag[window-d-1]
	obs = test[t]
	predictions_09.append(yhat)
	history.append(obs)
	#print('predicted=%f, expected=%f' % (yhat, obs))
error = mean_squared_error(test, predictions_09)
error2 = mean_squared_error(test, predictions_09)**0.5 #get the RMSE


tp= pd.DataFrame(test-predictions_09)  #tp is error between AR predict and real
error3=tp.describe()
#print('Predicting number is: %f' % predict_num)
print('Test MSE: %.3f' % error)
print('Test RMSE: %.3f' % error2)
print(error3)


#AR train for 2010
train, test = K[1:len(X)-predict_num], K[len(X)-predict_num:]
model2 = AR(train)
model_fit = model2.fit()
window = model_fit.k_ar
coef = model_fit.params
# walk forward over time steps in test
history = train[len(train)-window:]
history = [history[i] for i in range(len(history))]
predictions_10 = list()
for t in range(len(test)):
	length = len(history)
	lag = [history[i] for i in range(length-window,length)]
	yhat = coef[0]
	for d in range(window):
		yhat += coef[d+1] * lag[window-d-1]
	obs = test[t]
	predictions_10.append(yhat)
	history.append(obs)
	#print('predicted=%f, expected=%f' % (yhat, obs))
error = mean_squared_error(test, predictions_10)
error2 = mean_squared_error(test, predictions_10)**0.5 #get the RMSE

tp2= pd.DataFrame(test-predictions_10)  #tp is error between AR predict and real
error3=tp.describe()
#print('Predicting number is: %f' % predict_num)
print('AR_2010 MSE: %.3f' % error)
print('AR_2010 RMSE: %.3f' % error2)







"""

#print('The Wondow is: %f' % window)

pyplot.plot(test)
pyplot.plot(predictions, color='red')
pyplot.show()


ddk.corr()


pyplot.plot(tp)
#pyplot.plot(ddk['Temp H'], color='cx--')
#pyplot.plot(ddk['WS A H1'], color='mo:')
pyplot.plot(ddk['Temp H'], 'cx--', ddk['WS A H1'], 'mo:', ddk['WS A H2'], 'kp-.')
#pyplot.plot(ddk['WS A H2'], color='x')

#http://blog.sina.com.cn/s/blog_6baac06c0101g7sj.html   see drawing set

plt.show()

index=(ddk.tp>20)
j1= ddk[index]

pyplot.plot(j1['Temp H'], 'cx--', j1['WS A H1'], 'mo:', j1['WS A H2'], 'kp-.')


"""
from sklearn.svm import SVR

train_df=pd.concat((ddd.loc[len(X)-predict_num:],ddk.loc[0:len(X)-predict_num]))
#17521 datasets
test_df=ddk
#16000 datasets
y_train = pd.concat((tp,tp2.loc[0:len(X)-predict_num]))
y_real = tp2


X_train = train_df
X_test=test_df

svr_rbf=SVR(kernel='rbf',C=1e3,gamma=0.1)
svr_lin=SVR(kernel='linear',C=1e3)
svr_poly=SVR(kernel='poly',C=1e3,degree=2)


y_rbf=svr_rbf.fit(X_train,y_train).predict(X_test)


error = mean_squared_error(y_real, y_rbf)
error2 = mean_squared_error(y_real, y_rbf)**0.5 #get the RMSE
print('RBF SVR MSE: %.3f' % error)
print('RBF SVR RMSE: %.3f' % error2)



pw=np.array(predictions_10)
pw_pred=pw

pw_real=K[len(X)-predict_num:]
new_pred=y_rbf+pw_pred


error = mean_squared_error(pw_real, new_pred)
error2 = mean_squared_error(pw_real, new_pred)**0.5 #get the RMSE
print('new_pred MSE: %.3f' % error)
print('new_pred RMSE: %.3f' % error2)



"""
y_lin=svr_lin.fit(X_train,y_train).predict(X_test)
y_poly=svr_poly.fit(X_train,y_train).predict(X_test)

error = mean_squared_error(y_real, y_lin)
error2 = mean_squared_error(y_real, y_lin)**0.5 #get the RMSE
print('LIN SVR MSE: %.3f' % error)
print('LIN SVR RMSE: %.3f' % error2)

error = mean_squared_error(y_real, y_poly)
error2 = mean_squared_error(y_real, y_poly)**0.5 #get the RMSE
print('POLY SVR MSE: %.3f' % error)
print('POLY SVR RMSE: %.3f' % error2)

"""




#try the RFG
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestRegressor

max_features = [.1, .2 ]
test_scores = []
for max_feat in max_features:
    clf = RandomForestRegressor(n_estimators=300, max_features=max_feat)
    test_score = np.sqrt(-cross_val_score(clf, X_train, y_train, cv=5, scoring='neg_mean_squared_error'))
    test_scores.append(np.mean(test_score))

plt.plot(max_features, test_scores)
plt.title("Max Features vs CV Error");
plt.show()


rf = RandomForestRegressor(n_estimators=200, max_features=.1)
rf.fit(X_train, y_train)
y_rf = rf.predict(X_test)

pw=np.array(predictions_10)
pw_pred=pw

pw_real=K
new_pred=y_rf+pw_pred

y_real = tp2

error = mean_squared_error(y_real, y_rf)
error2 = mean_squared_error(y_real, y_rf)**0.5 #get the RMSE
print('RF MSE: %.3f' % error)
print('RF RMSE: %.3f' % error2)
